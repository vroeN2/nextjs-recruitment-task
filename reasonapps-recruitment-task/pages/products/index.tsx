import type { NextPage } from "next";
import Head from "next/head";
import styles from "../../styles/Home.module.css";
import { ApolloClient, InMemoryCache, gql } from "@apollo/client";
import ProductCard from "../../components/ProductCard";
import { ChangeEvent, useEffect, useState } from "react";
import {
  SearchboxWrapper,
  Searchbox,
  StyledGrid,
} from "../../components/styled";

interface Products {
  products: Product[];
}

export interface Product {
  id: string;
  name: string;
  image: string;
  price: string;
  description: string;
}

const Home: NextPage<Products> = ({ products }) => {
  const [searchTerm, setSearchTerm] = useState("");
  const [searchResults, setSearchResults] = useState<Product[]>(products);

  const handleChange = (e: ChangeEvent<HTMLInputElement>) => {
    setSearchTerm(e.target.value);
  };

  useEffect(() => {
    setSearchResults(
      products.filter((product) => {
        return product.name.toLowerCase().includes(searchTerm);
      })
    );
  }, [searchTerm, products]);

  return (
    <div className={styles.container}>
      <Head>
        <title>List of our products</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <main className={styles.main_content}>
        <SearchboxWrapper>
          <Searchbox
            enterButton="Search"
            size="large"
            placeholder="check if we have what you are looking for"
            value={searchTerm}
            onChange={(e) => handleChange(e)}
          />
        </SearchboxWrapper>

        <StyledGrid style={{ marginTop: "5vh" }}>
          {searchResults.map((product: Product) => {
            return <ProductCard {...product} key={product.id} />;
          })}
        </StyledGrid>
      </main>

      <footer className={styles.footer}>Made by M. Zachariasz</footer>
    </div>
  );
};

export default Home;

export const getStaticProps = async () => {
  const client = new ApolloClient({
    uri: "https://reasonapps-gql-api.vercel.app/api/graphql",
    cache: new InMemoryCache(),
  });

  const { data } = await client.query({
    query: gql`
      query Product {
        products {
          id
          name
          image
          price
          description
        }
      }
    `,
  });

  return {
    props: {
      products: data.products,
    },
  };
};
